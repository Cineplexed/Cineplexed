// Code generated by swaggo/swag. DO NOT EDIT.

package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/deleteUser": {
            "delete": {
                "description": "delete a user with a User-Id",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "deleteUser",
                "parameters": [
                    {
                        "type": "string",
                        "description": "UserID",
                        "name": "User-Id",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {}
            }
        },
        "/finishGame": {
            "post": {
                "description": "update success rates of user and daily",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "finishGame",
                "parameters": [
                    {
                        "type": "string",
                        "description": "UserID",
                        "name": "User-Id",
                        "in": "header"
                    },
                    {
                        "description": "User Data",
                        "name": "UserData",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.Users"
                        }
                    }
                ],
                "responses": {}
            }
        },
        "/getHint": {
            "get": {
                "description": "Get a hint towards the daily movie",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "movie"
                ],
                "summary": "Hint",
                "responses": {}
            }
        },
        "/getMovieDetails": {
            "get": {
                "description": "Get a movie with extensive details using it's ID",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "movie"
                ],
                "summary": "movieWithDetails",
                "parameters": [
                    {
                        "description": "ID",
                        "name": "Item",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.docs_ID"
                        }
                    }
                ],
                "responses": {}
            }
        },
        "/getMovieOptions": {
            "get": {
                "description": "Get a list of possible movies by it's title",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "movie"
                ],
                "summary": "moviesByName",
                "parameters": [
                    {
                        "description": "Title",
                        "name": "Item",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.docs_Title"
                        }
                    }
                ],
                "responses": {}
            }
        },
        "/makeUser": {
            "post": {
                "description": "create a new user",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "makeUser",
                "parameters": [
                    {
                        "description": "User Data",
                        "name": "UserData",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.Users"
                        }
                    }
                ],
                "responses": {}
            }
        },
        "/updateUser": {
            "patch": {
                "description": "update a user with a User-Id and new username and password",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "updateUser",
                "parameters": [
                    {
                        "type": "string",
                        "description": "UserID",
                        "name": "User-Id",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "User Data",
                        "name": "UserData",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.Users"
                        }
                    }
                ],
                "responses": {}
            }
        },
        "/validateUser": {
            "post": {
                "description": "validate a user with a username and password",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "validateUser",
                "parameters": [
                    {
                        "description": "User Data",
                        "name": "UserData",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.Users"
                        }
                    }
                ],
                "responses": {}
            }
        }
    },
    "definitions": {
        "main.Users": {
            "type": "object",
            "properties": {
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "main.docs_ID": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                }
            }
        },
        "main.docs_Title": {
            "type": "object",
            "properties": {
                "title": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:5050",
	BasePath:         "/",
	Schemes:          []string{"http"},
	Title:            "Gin Swagger Cineplexed",
	Description:      "This is Cineplexed.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
